
LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803800  00803800  00000200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00803800  00803800  00000200  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000230  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000223e  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001bbb  00000000  00000000  00002556  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000050c  00000000  00000000  00004111  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000110  00000000  00000000  00004620  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f15  00000000  00000000  00004730  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ca  00000000  00000000  00005645  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  0000570f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
   4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  34:	0c 94 6d 00 	jmp	0xda	; 0xda <__vector_13>
  38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  54:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  58:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  5c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  60:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  64:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  68:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  6c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  70:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  74:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>

00000078 <__ctors_end>:
  78:	11 24       	eor	r1, r1
  7a:	1f be       	out	0x3f, r1	; 63
  7c:	cf ef       	ldi	r28, 0xFF	; 255
  7e:	cd bf       	out	0x3d, r28	; 61
  80:	df e3       	ldi	r29, 0x3F	; 63
  82:	de bf       	out	0x3e, r29	; 62

00000084 <__do_clear_bss>:
  84:	28 e3       	ldi	r18, 0x38	; 56
  86:	a0 e0       	ldi	r26, 0x00	; 0
  88:	b8 e3       	ldi	r27, 0x38	; 56
  8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
  8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
  8e:	a4 30       	cpi	r26, 0x04	; 4
  90:	b2 07       	cpc	r27, r18
  92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
  94:	0e 94 bb 00 	call	0x176	; 0x176 <main>
  98:	0c 94 c4 00 	jmp	0x188	; 0x188 <_exit>

0000009c <__bad_interrupt>:
  9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <apInit>:
void apInit(void)
{
  


	PORTC.DIRSET = (1 << 0);
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <__RODATA_PM_OFFSET__+0x7f8441>
  a6:	08 95       	ret

000000a8 <apMain>:
void apMain(void)
{
  uint32_t pre_time;


  pre_time = millis();
  a8:	0e 94 ac 00 	call	0x158	; 0x158 <millis>
  ac:	6b 01       	movw	r12, r22
  ae:	7c 01       	movw	r14, r24
  while(1)
  {
    if(millis() - pre_time >= 100)
  b0:	0e 94 ac 00 	call	0x158	; 0x158 <millis>
  b4:	dc 01       	movw	r26, r24
  b6:	cb 01       	movw	r24, r22
  b8:	8c 19       	sub	r24, r12
  ba:	9d 09       	sbc	r25, r13
  bc:	ae 09       	sbc	r26, r14
  be:	bf 09       	sbc	r27, r15
  c0:	84 36       	cpi	r24, 0x64	; 100
  c2:	91 05       	cpc	r25, r1
  c4:	a1 05       	cpc	r26, r1
  c6:	b1 05       	cpc	r27, r1
  c8:	98 f3       	brcs	.-26     	; 0xb0 <apMain+0x8>
    {
      pre_time = millis();
  ca:	0e 94 ac 00 	call	0x158	; 0x158 <millis>
  ce:	6b 01       	movw	r12, r22
  d0:	7c 01       	movw	r14, r24
  	  PORTC.OUTTGL = (1 << 0);
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	80 93 47 04 	sts	0x0447, r24	; 0x800447 <__RODATA_PM_OFFSET__+0x7f8447>
  d8:	eb cf       	rjmp	.-42     	; 0xb0 <apMain+0x8>

000000da <__vector_13>:
  sei();
}


void delay(uint32_t ms)
{
  da:	78 94       	sei
  dc:	1f 92       	push	r1
  de:	0f 92       	push	r0
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	0f 92       	push	r0
  e4:	11 24       	eor	r1, r1
  e6:	8f 93       	push	r24
  e8:	9f 93       	push	r25
  ea:	af 93       	push	r26
  ec:	bf 93       	push	r27
  ee:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
  f2:	90 91 01 38 	lds	r25, 0x3801	; 0x803801 <__DATA_REGION_ORIGIN__+0x1>
  f6:	a0 91 02 38 	lds	r26, 0x3802	; 0x803802 <__DATA_REGION_ORIGIN__+0x2>
  fa:	b0 91 03 38 	lds	r27, 0x3803	; 0x803803 <__DATA_REGION_ORIGIN__+0x3>
  fe:	01 96       	adiw	r24, 0x01	; 1
 100:	a1 1d       	adc	r26, r1
 102:	b1 1d       	adc	r27, r1
 104:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__DATA_REGION_ORIGIN__>
 108:	90 93 01 38 	sts	0x3801, r25	; 0x803801 <__DATA_REGION_ORIGIN__+0x1>
 10c:	a0 93 02 38 	sts	0x3802, r26	; 0x803802 <__DATA_REGION_ORIGIN__+0x2>
 110:	b0 93 03 38 	sts	0x3803, r27	; 0x803803 <__DATA_REGION_ORIGIN__+0x3>
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <__RODATA_PM_OFFSET__+0x7f8a86>
 11a:	bf 91       	pop	r27
 11c:	af 91       	pop	r26
 11e:	9f 91       	pop	r25
 120:	8f 91       	pop	r24
 122:	0f 90       	pop	r0
 124:	0f be       	out	0x3f, r0	; 63
 126:	0f 90       	pop	r0
 128:	1f 90       	pop	r1
 12a:	18 95       	reti

0000012c <bspInit>:
 12c:	88 ed       	ldi	r24, 0xD8	; 216
 12e:	84 bf       	out	0x34, r24	; 52
 130:	e0 e6       	ldi	r30, 0x60	; 96
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	10 82       	st	Z, r1
 136:	84 bf       	out	0x34, r24	; 52
 138:	11 82       	std	Z+1, r1	; 0x01
 13a:	e0 e8       	ldi	r30, 0x80	; 128
 13c:	fa e0       	ldi	r31, 0x0A	; 10
 13e:	10 82       	st	Z, r1
 140:	11 82       	std	Z+1, r1	; 0x01
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	85 83       	std	Z+5, r24	; 0x05
 146:	8f e1       	ldi	r24, 0x1F	; 31
 148:	9e e4       	ldi	r25, 0x4E	; 78
 14a:	84 87       	std	Z+12, r24	; 0x0c
 14c:	95 87       	std	Z+13, r25	; 0x0d
 14e:	80 81       	ld	r24, Z
 150:	81 60       	ori	r24, 0x01	; 1
 152:	80 83       	st	Z, r24
 154:	78 94       	sei
 156:	08 95       	ret

00000158 <millis>:
}

uint32_t millis(void)
{
	uint32_t ret;
  uint8_t old_sreg = SREG;
 158:	2f b7       	in	r18, 0x3f	; 63
 

  cli();
 15a:	f8 94       	cli
  ret = ms_cnt;
 15c:	60 91 00 38 	lds	r22, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 160:	70 91 01 38 	lds	r23, 0x3801	; 0x803801 <__DATA_REGION_ORIGIN__+0x1>
 164:	80 91 02 38 	lds	r24, 0x3802	; 0x803802 <__DATA_REGION_ORIGIN__+0x2>
 168:	90 91 03 38 	lds	r25, 0x3803	; 0x803803 <__DATA_REGION_ORIGIN__+0x3>
  SREG = old_sreg;
 16c:	2f bf       	out	0x3f, r18	; 63
	
	return ret;
}
 16e:	08 95       	ret

00000170 <hwInit>:
#include "hw.h"


void hwInit(void)
{
	bspInit();
 170:	0e 94 96 00 	call	0x12c	; 0x12c <bspInit>
 174:	08 95       	ret

00000176 <main>:
#include "main.h"


int main(void)
{
	hwInit();
 176:	0e 94 b8 00 	call	0x170	; 0x170 <hwInit>
	apInit();
 17a:	0e 94 50 00 	call	0xa0	; 0xa0 <apInit>
	
	apMain();
 17e:	0e 94 54 00 	call	0xa8	; 0xa8 <apMain>
	
	return 0;
}
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	08 95       	ret

00000188 <_exit>:
 188:	f8 94       	cli

0000018a <__stop_program>:
 18a:	ff cf       	rjmp	.-2      	; 0x18a <__stop_program>
